# -*- coding: utf-8 -*-
"""Repulsor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fkJ6a3w1ePoaVYbdWUfgCnhJaLxTLGPH

# Sonic Amplification through Reactive Electrical Pulsation using Paschen's Law

## Background

An Initial Sound Wave of Pressure Difference $ΔP$ in Pa is generated by a speaker of β decibels. 

>The Pressure vs Time relationship for a Soundwave can be described by a sinusoidal wave, where the pressure increases for half a cycle peaking at $P_{max} = ΔP + P_{atm}$ 

>The other half of the cycle is characterized by the decrease in Pressure magnitude, peaking at $P_{min} = P_{atm} - ΔP$.

 

It is known from Paschen's Law that the Breakdown Voltage $V_{B}$ in Volts is directly proportional to the electrode gap length $d$ in cm and the medium's Pressure $P$ in Pa.
> The key concept behind Paschen's Law is that as the medium's pressure $P$ is lowered for a particular gap length $d$, the Breakdown Voltage required for spark formation is lowered as well. 

The principle of operation for the Repulsor works as follows: 

1. A Speaker generates a sound wave of frequency $ν$ in Hz, of β dB and produces a minimum pressure of $P_{min}$ in a tube of cross section $A$ in $m^{2}$. 

2. An array of plates is placed along the length of the tube. A constant Electric Field of Voltage $V_{B}$ is applied across said plates.
3. As the sound wave travels across the length of the tube its minimal pressure points will travel across the discharge plates. The reduction in pressure at these points will trigger the formation of a spark. 

4. Spark formation will heat the surrounding air, and increase the energy of the travelling sound wave by $ΔE_{spark}$.

5. This increase in energy will lead to the Pressure Difference $ΔP$ of the Sound Wave to increase, which in turn lowers the value of $P_{min}$ and with it the value of the Breakdown Voltage $V_{B}$. 

> With the increase in Sound Wave Pressure Difference, the Intensity of the Wave will increase. This cycle is repeated for $n$ discharge plates. The number of plates is selected based on the amplification requirements of the particular application. 

The Operating Principles of the Repulsor will be modeled below:
"""

import numpy as np
import matplotlib.pyplot as plt

#Defining Constants
I_0 = 1e-12 # Threshold Hearing Intensity in W/m
L = 1 #Tube Length in m
D = 0.1 # Tube Diameter in m
A = 3.1416*(D/2)**2 # Tube Cross Section in m^2
β_init = 168.64 # Speaker Sensitivity, in dB
ΔE = 1 # Spark Energy, in Joules
P_atm = 101325 #Atmospheric Pressure at Sea Level, in Pa
ρ = 1.225 # STP Air Density, in kg/m^3
v_sound = 346 # Speed of Sound in Air at 20ºC
ν = 50 # Speaker Frequency, in Hz
n = 10 #Number of Discharge Plates
#Defining Functions
def deltaP(β):
  p = np.sqrt(2*ρ*v_sound*I_0*10**(β/10))
  return p

def beta(E):
  B = 10*np.log10(ν*(E)/(A*I_0))
  return B

#Initialization
P_arr = np.zeros(n)
β_arr = np.zeros(n)
E_arr = np.zeros(n)
E_0 = I_0*(10**(β_init/10))*A/ν
print(E_0)
P_0 = deltaP(β_init)
β_arr[0] = β_init
E_arr[0] = E_0
P_arr[0] = P_0

#Run Loop for Sonic Amplification
for k in range(0,n):
  E_arr[k] = E_arr[0]+k*ΔE
  β_arr[k] = beta(E_arr[k])
  P_arr[k] = deltaP(β_arr[k])

#Plotting
t = np.linspace(1e-10, L/v_sound,n)
plt.plot(t,P_arr,'r')
plt.title('Maximum Pressure vs. Time')
plt.xlabel('Time [s]')
plt.ylabel('Pressure [Pa]')
plt.show()

plt.plot(t,β_arr,'b')
plt.title('Decibel vs. Time')
plt.xlabel('Time [s]')
plt.ylabel('dB')
plt.show()

plt.plot(t,E_arr,'g')
plt.title('Sound Energy vs. Time')
plt.xlabel('Time [s]')
plt.ylabel('Energy [J]')
plt.show()

mat = []
res = 1000
r = res//n
tim_tot = np.linspace(0,n*L/v_sound,res)

for k in range(1,n+1):
  time = np.linspace((k-1)*L/v_sound,k*L/v_sound, r)
  y = P_arr[k-1]*np.sin(2*3.1416*(v_sound/L)*time) 
  mat.append(y)

mat = np.reshape(mat,res)

plt.plot(tim_tot,mat,'r',linewidth=3.5)
plt.title('Amplitude vs Time')
plt.xlabel('Time [s]')
plt.ylabel('Pressure [Pa]')
plt.show()

"""# Voltage Breakdown

It is known from Paschen's Law that the Breakdown Voltage  𝑉𝐵  in Volts is directly proportional to the electrode gap length  𝑑  in cm and the medium's Pressure  𝑃  in Pa. These conditions are related as follows: 

>$V_{B} = \frac{Bpd}{ln(\frac{Apd}{ln(1/γ_{se})})}$

Where:


*   A is the saturation ionization, with a value of $112.5 (kPa·cm)^{-1}$
*   B is related to the excitation and ionization energies, with a value of $2737.5 \frac{V}{kPa·cm}$
*   $V_{B}$ is the Breakdown Voltage, in Volts
*   p is the medium's pressure, in Pa
*   d is the electrode gap, in cm
*   $γ_{se}$ is the secondary emission coefficient, with a value of 0.6


"""

import numpy as np
import matplotlib.pyplot as plt
# The value of the Secondary Emission Coefficient
A = 112.5 # In 1/kPacm
B = 2737.5 # In V/kPacm
p = np.linspace(1e-1,1e3,10000) #in kPa
d = 1 #cm
γ = 0.1
VB_arr = []
def VB(p):
  return (B*p*d)/(np.log(A*p*d/np.log(1/γ)))

for k in p:
  VB_arr.append(VB(k))

plt.loglog(p,VB_arr,'r')
plt.title('Breakdown Voltage vs Pressure')
plt.xlabel('Pressure [kPa]')
plt.ylabel('Breakdown Voltage [V]')
plt.show()

P_m = (P_atm +- P_arr[0])/1000 #Minimum Pressure in Kpa
Patmkpa = P_atm/1000 #Atmospheric Pressure in kPa
Vbreakdown = VB(P_m)
Vbreakdown_atm = VB(Patmkpa)

print('The Voltage required to Breakdown Air at Atmospheric Pressure is', Vbreakdown_atm)
print('The Voltage required to Breakdown Air at Pmin is', Vbreakdown, 'Volts')
Vdiff = -Vbreakdown + Vbreakdown_atm
print('The Voltage Difference required is of', Vdiff, 'Volts')

"""# Revised Calculations"""

import numpy as np
####USER DEFINED VARIABLES
R = 5*1e-2 #Tube Radius in cm
A = 3.1416*R**2 ##Tube Cross Section
L = 1# Tube Length
ΔE = 100
n = 20 #Electrode Number
f = 10# Frequency in Hz
P_speaker = 1150 #Watts
####CONSTANTS
Patm = 101325 # Atmospheric Pressure in Pa
I_0 = 1e-12
ρ = 1.225 #Density of Air
w = 2*3.1416*f #Angular Frequency
v_sound = 343 #Speed of sound in m/s
k = f/v_sound

t = np.linspace(0,L/v_sound,n+1)
x = np.linspace(0, L, n+1)

###DEFNINING ENERGY FUNCTION
def E(n,ΔP):
  return A*ρ*w*ΔP + n*ΔE

###INITIALIZING
ΔP_arr = []
E_arr = []
β_arr = []

β_init = 10*np.log10(P_speaker/(A*I_0))
ΔP_init = np.sqrt(2*ρ*v_sound*I_0*(10**(β_init/10)))
E_init = E(0,ΔP_init)

ΔP_arr.append(ΔP_init)
β_arr.append(β_init)
#####FOR LOOP

for i in range(0,n+1):
  En = E(i,ΔP_arr[i])
  ΔPn = En/(A*ρ*w)
  Powern = (ΔPn**2)*A/(ρ*v_sound)
  dB = 10*np.log10(Powern/(A*I_0))
  E_arr.append(En)
  ΔP_arr.append(ΔPn)
  β_arr.append(dB)

del ΔP_arr[0]
del β_arr[-1]

# The value of the Secondary Emission Coefficient
A = 112.5 # In 1/kPacm
B = 2737.5 # In V/kPacm
d = 1 #cm
γ = 0.1
Vdiff_arr = []
def VB(p):
  return (B*p*d)/(np.log(A*p*d/np.log(1/γ)))

for j in range(0,n+1):
  P_m = (Patm - ΔP_arr[j])/1000 # Min Pressure in Kpa
  Patmkpa = Patm/1000 #Atmospheric Pressure in kPa
  Vbreakdown = VB(P_m)
  Vbreakdown_atm = VB(Patmkpa)
  Vdiff = Vbreakdown_atm - Vbreakdown
  Vdiff_arr.append(Vdiff)
#Plotting Voltage Difference vs Electride Number
plt.plot(range(0,n+1),Vdiff_arr,'pr',linewidth=4)
plt.xticks(range(0,n+1))
plt.grid()
plt.title('Voltage Difference vs Electrode Number')
plt.xlabel('Electrode Number')
plt.ylabel('Voltage Difference [V]')
plt.show()

#Printing Actual Values Needed from the High Voltage Electronics
Pminimum = (Patm - ΔP_arr[0])/1000 #Minimum Pressure in Kpa
Vbreakdown = VB(P_m)
Vbreakdown = float("{:.2f}".format(Vbreakdown))
Vbreakdown_atm = VB(Patmkpa)
Vbreakdown_atm = float("{:.2f}".format(Vbreakdown_atm))
Vdiff = Vbreakdown_atm - Vbreakdown
Vdiff = float("{:.2f}".format(Vdiff))
print('The Voltage required to Breakdown Air at Atmospheric Pressure is', Vbreakdown_atm)
print('The Voltage required to Breakdown Air at Pmin is', Vbreakdown, 'Volts')
print('The Voltage Difference required is of', Vdiff, 'Volts')

import matplotlib.pyplot as plt

####PLOTING
plt.plot(t,E_arr,'g',linewidth=3.5)
plt.title('Energy vs Time')
plt.xlabel('Time [s]')
plt.ylabel('Energy [J]')
plt.show()

plt.plot(t,β_arr,linewidth=3.5)
plt.title('Decibel vs Time')
plt.xlabel('Time [s]')
plt.ylabel('dB')
plt.show()

mat = []
res = 1000
r = res//n
tim_tot = np.linspace(0,L/v_sound,res)

for k in range(1,n+1):
  time = np.linspace((k-1)*L/v_sound,k*L/v_sound, r)
  y = ΔP_arr[k-1]*np.sin(2*3.1416*(v_sound/L)*time) 
  mat.append(y)

mat = np.reshape(mat,res)
Pmin = np.multiply(-1,ΔP_arr)
plt.plot(tim_tot,mat,'r',linewidth=3.5,label = 'P(t)')
plt.plot(t,ΔP_arr,'b',linewidth=3.5,label='Pmax(t)')
plt.plot(t,Pmin,'g',linewidth=3.5,label='Pmin(t)')
plt.title('Amplitude vs Time')
plt.xlabel('Time [s]')
plt.ylabel('Pressure [Pa]')
plt.legend()
plt.show()